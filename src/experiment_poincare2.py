"""
experiment_poincare_2.py
Nonrigorous computation of Poincare, newton method seeking orbit
Author: Yuan Wang
"""

from thesis_utils import *
from thesis_defaults import *
from thesis_poincare_utils import *
from thesis_plot_utils import *

import scipy.integrate as integrate
import scipy.special as special
from scipy.integrate import quad
from scipy.optimize import newton


import random
import numdifftools as nd

from evolution import *
from experiment import *

class ExperimentPoincare2(Experiment):

    def setParams(self, hyperplane = HyperPlane(1, 1, 1, 1, 4)):
        self.hyperplane = hyperplane
        self.params['hyperplane'] = hyperplane
        self.saveParams()

    def P(self, x_0, stepCnt_MAX = 100000, TMAX = 10000):
        """
        x: a point on C2 intersecting with a hyperplane
        P(x): the first intersection with the hyperplane we experience again
        """
        hyperplane = self.hyperplane

        dt = TMAX / stepCnt_MAX

        current_pt = list(x_0)
        # track intersections with hyperplane
        intersect_checker = IntersectChecker(hyperplane)
        
        # Stepping through "time".
        for i in range(stepCnt_MAX):
            # Derivatives of the W, X, Y, Z state
            derivs = self.evo(current_pt)

            ## copy last pt
            old_pt = list(current_pt)

            ## compute new point
            for j in range(4):
                current_pt[j] = old_pt[j] + (derivs[j] * dt)

            ## return on first intersect
            if intersect_checker(current_pt) != 0:
                ## explain what happened
                return current_pt

        raise RuntimeWarning("P was unable to find intersection before step count maximum: " + str(stepCnt_MAX))
        return None

    def run(self, start_pts = []):
        """Simulate path, collecting Poincare crossings"""
        self.print("x, P(x)")

        for start_pt in start_pts:
            self.print("x = " + str(start_pt))
            self.print("P(x) = " + str(self.P(start_pt)) )
        

def random_start(scale = 2, offset = 1):
    return [ random.random() * scale - offset for i in range(4) ]


some_crossings = [    
    (0.80019028241888679, -1.2408616213889998, 0.77994698854060274, -0.3210095331938847),
    (0.034228653002959533, -0.67903476618858616, 0.23622415985040765, 0.41569239117039564),
    (-1.0134483596851165, 0.54709093545623577, -0.89153524151963315, 1.3769460324982898),
    (0.33561443204061076, -0.67387446824271569, -0.056408753154833208, 0.39683337709967043),
    (-0.22705655422023427, -0.53359685103558052, 0.35222743604387796, 0.41894969513556879),
    (0.22493688278347601, -0.42450713353333713, -0.33316596344217275, 0.54075934229873623),
    (-0.64117812940237162, 0.0073088800347761371, -0.30116484653194026, 0.94820807845715971),
    (0.027804434647329544, -0.47554115056820906, -0.17003057554085996, 0.62758591655853402),
    (5.6439639955484635, -5.8870500818086233, 5.9326332772201242, -5.4520478830176424),
    (0.39287413907668356, -0.28596908349806399, -0.5060114426667377, 0.40588724329056447),
    (-0.4866429650088161, -0.31677524698622955, 0.3862631044007096, 0.42776225936584622),
    (0.2274592009079302, -0.24315825428763368, -0.57094087865378806, 0.5908581297111698),
    (0.46702440713960541, -1.0985862597357023, 1.2337288866404676, -0.58746982448139273),
    (-0.0007587834862749235, -0.00026128328597617732, -1.3883051422414754, 1.3975744428892998),
    (1.4043345745797371, -1.73867212757066, 2.1764345601294539, -1.7722807733814958),
    (4.2900605629112654e-07, -8.4912132745479403e-08, 2.827983774789752, -2.8185605582580533),
    (1.4631459744049136, -1.1726862426435118, 0.56381521967044179, -0.82764595048394152),
    (1.3247811275959356, -1.3402707458843715, 0.0013965410565441331, 0.023693372792229286),
    (-0.61243214310585148, -0.18767561220482915, 0.48330313664771529, 0.32758591628366035),
    (-0.0051020116605465515, 0.0076968706848320034, -1.1548356763263783, 1.1605148212043741),
    (-0.88670881839134974, 0.11859730970802639, -0.11350065085026094, 0.9011646815472677),
    (-0.038995000279149004, -0.31196055188430849, -0.48295900717496221, 0.83574541044851458),
    (-4.9402010688003406, 4.9330469686918255, -5.266497878361097, 5.4310501392915871),
    (1.9950463996284595, -1.9913233748561607, -0.0026335971176652388, 2.6133972812738109e-05),
    (-15.004395052293013, 16.269352433266953, -14.646319686711458, 16.506733325066207),
    (-0.23697315177330178, -0.19313512301887006, -0.5529286022204366, 0.98868634253508514),
    (-0.57602582708037708, 0.27593979592455431, -0.95280998477659595, 1.2670171584161023),
    (0.96310354414547417, -0.98681045945098445, -0.080970342380213681, 0.11399822433804815),
    (-0.4935548713272192, -0.36982445974129097, 0.59138263525214385, 0.28332753020765761),
    (-0.018229405669178075, -0.004894646004333726, -1.1247321106567743, 1.1560331326003399),
    (0.0050057386627905247, 0.15670000185997468, -1.0570514226985581, 0.9082894546645699),
    (1.8043300565308316, -1.7950775974117641, 0.00056613955105136969, -0.0063400643845068971),
    (0.019271366358533829, -0.56524922317385029, 1.1723728914392046, -0.61090578702103282),
    (6.7288431130858689e-09, -2.5092762399493873e-09, 4.5276995137369438, -4.5414038566352302),
    (1.3505819565360249, -0.99953781910568318, 0.23827296296739117, -0.57408342397109358),
    (1.5688752010519158, -1.5833906497288195, 0.0041041559169197961, 0.015740281877251634),
    (-0.68873343327798875, -0.17111784288870496, 0.52335399429594776, 0.3585357577997722),
    (-0.0018004290336272571, 0.0064266411372197003, -1.3119719293946137, 1.3170077923618386),
    (-0.61570173221531777, -0.3184122152582809, 0.31430700919581778, 0.63422364187861602),
    (1.2261958681223977, -1.1759406629902214, -0.079245531641626829, 0.036028242684568376),
    (-0.92389848139567277, 0.029160692264716192, 0.13904979124461447, 0.7684362319485597),
    (0.28793268862697907, -0.35554477064574064, -0.61139623260077613, 0.68339780205194778),
    (1.7131452466399357, -2.2973928799933478, 2.4973510286185308, -1.8390545761970714),
    (-6.1134796758562394e-05, 2.0375264385931869e-05, -2.1548898977891491, 2.1606390782522316),
    (1.3239051614577864, -1.4755116157641202, 0.62393992447288626, -0.45368120058476885),
    (0.85064255157813884, -1.2482800497827924, 0.25187572827264948, 0.15172339461591769),
    (-0.62719361255817352, -0.35042929153071134, 0.25725911577399918, 0.73142622594026319),
    (-0.0026059681689245672, -0.34434614946434167, -0.59854495637398242, 0.95360461022308196) ]

def main():
    """
    Testing
    """

    print("============")
    evo = Evolution_1a(lmbda = lmbda_set_1)
    #evo = Evolution_1a(lmbda = default_lmbda)

    print(evo)

    expmt = ExperimentPoincare2(   evo = evo, 
                                    title = "Nonrigorous computation of Poincare, newton method seeking orbit", 
                                    descr = "Leveraging Poincare maps to gain insights about our system")

    # expmt.setParams(T = 4, start_pt = default_start)
    expmt.setParams(hyperplane = HyperPlane(1, 1, 1, 1, 0.01) )

    print("============")
    print(expmt)

    expmt.run(start_pts = some_crossings  )

if __name__=="__main__":
    main()

