"""
experiment_poincare_2.py
Nonrigorous computation of Poincare, newton method on minimizing |P(x) - x|^2 seeking orbit
Author: Yuan Wang
"""

from thesis_utils import *
from thesis_defaults import *
from thesis_poincare_utils import *
from thesis_plot_utils import *

import scipy.integrate as integrate
import scipy.special as special
from scipy.integrate import quad
from scipy.optimize import newton


import random
import numdifftools as nd

from evolution import *
from experiment import *

class ExperimentPoincare3(Experiment):

    def setParams(self, hyperplane = HyperPlane(1, 1, 1, 1, 4)):
        self.hyperplane = hyperplane
        self.params['hyperplane'] = str(hyperplane)
        self.saveParams()

    def P(self, x_0, stepCnt_MAX = 100000, TMAX = 10000):
        """
        x: a point on C2 intersecting with a hyperplane
        P(x): the first intersection with the hyperplane we experience again
        """
        hyperplane = self.hyperplane

        dt = TMAX / stepCnt_MAX

        current_pt = list(x_0)
        # track intersections with hyperplane
        intersect_checker = IntersectChecker(hyperplane)
        
        # Stepping through "time".
        for i in range(stepCnt_MAX):
            # Derivatives of the W, X, Y, Z state
            derivs = self.evo(current_pt)

            ## copy last pt
            old_pt = list(current_pt)

            ## compute new point
            for j in range(4):
                current_pt[j] = old_pt[j] + (derivs[j] * dt)

            ## return on first intersect
            if intersect_checker(current_pt) != 0:
                ## explain what happened
                return current_pt

        #raise RuntimeWarning("P was unable to find intersection before step count maximum: " + str(stepCnt_MAX))
        return None

    def run(self, start_pts = []):
        """Simulate path, collecting Poincare crossings"""
        self.print("x, P(x)")

        for start_pt in start_pts:
            self.newton_search(start_pt)


    def P_instance(self, x):
        # print(x)
        # print(P(x_0 = x, hyperplane = hyperplane))
        res = self.P(x_0 = x)
        if res == None:
            return None
            
        return quad_sq_distance(x, res)

    def newton_search(self, x_0, N = 25):

        x = list(x_0)
        self.print("x_0 = " + str(x_0))
        hessian = nd.core.Hessian(self.P_instance)
        jacobian = nd.core.Jacobian(self.P_instance)

        print(x)
        print(hessian )

        for i in range(N):    
            print("PASS " + str(i))
            print("x = " + str(x) )
            adjust = np.matmul(np.linalg.inv(hessian(x)), np.transpose( jacobian(x)))
            adjust = np.transpose(adjust)[0]
            
            ##print(adjust)
            res = self.P_instance(x)
            if res == None:
                self.print("Timed out")
                return

            print("dist = " + str(res))
            x = list_subtract(x, adjust)

        self.print("dist = " + str(self.P_instance(x)))
        self.print("x_25 = " + str(x))
        self.print("------------------")

    
    #x_0 = (0.54595411849672337, -0.51509962495305384, 0.83292233890090173, 0.13541863005974944
        

def random_start(scale = 2, offset = 1):
    return [ random.random() * scale - offset for i in range(4) ]

some_crossings = [    
    (0.80019028241888679, -1.2408616213889998, 0.77994698854060274, -0.3210095331938847),
    (0.034228653002959533, -0.67903476618858616, 0.23622415985040765, 0.41569239117039564),
    (-1.0134483596851165, 0.54709093545623577, -0.89153524151963315, 1.3769460324982898),
    (0.33561443204061076, -0.67387446824271569, -0.056408753154833208, 0.39683337709967043),
    (-0.22705655422023427, -0.53359685103558052, 0.35222743604387796, 0.41894969513556879),
    (0.22493688278347601, -0.42450713353333713, -0.33316596344217275, 0.54075934229873623),
    (-0.64117812940237162, 0.0073088800347761371, -0.30116484653194026, 0.94820807845715971),
    (0.027804434647329544, -0.47554115056820906, -0.17003057554085996, 0.62758591655853402),
    (5.6439639955484635, -5.8870500818086233, 5.9326332772201242, -5.4520478830176424),
    (0.39287413907668356, -0.28596908349806399, -0.5060114426667377, 0.40588724329056447),
    (-0.4866429650088161, -0.31677524698622955, 0.3862631044007096, 0.42776225936584622),
    (0.2274592009079302, -0.24315825428763368, -0.57094087865378806, 0.5908581297111698),
    (0.46702440713960541, -1.0985862597357023, 1.2337288866404676, -0.58746982448139273),
    (-0.0007587834862749235, -0.00026128328597617732, -1.3883051422414754, 1.3975744428892998),
    (1.4043345745797371, -1.73867212757066, 2.1764345601294539, -1.7722807733814958),
    (4.2900605629112654e-07, -8.4912132745479403e-08, 2.827983774789752, -2.8185605582580533),
    (1.4631459744049136, -1.1726862426435118, 0.56381521967044179, -0.82764595048394152),
    (1.3247811275959356, -1.3402707458843715, 0.0013965410565441331, 0.023693372792229286),
    (-0.61243214310585148, -0.18767561220482915, 0.48330313664771529, 0.32758591628366035),
    (-0.0051020116605465515, 0.0076968706848320034, -1.1548356763263783, 1.1605148212043741),
    (-0.88670881839134974, 0.11859730970802639, -0.11350065085026094, 0.9011646815472677),
    (-0.038995000279149004, -0.31196055188430849, -0.48295900717496221, 0.83574541044851458),
    (-4.9402010688003406, 4.9330469686918255, -5.266497878361097, 5.4310501392915871),
    (1.9950463996284595, -1.9913233748561607, -0.0026335971176652388, 2.6133972812738109e-05),
    (-15.004395052293013, 16.269352433266953, -14.646319686711458, 16.506733325066207),
    (-0.23697315177330178, -0.19313512301887006, -0.5529286022204366, 0.98868634253508514),
    (-0.57602582708037708, 0.27593979592455431, -0.95280998477659595, 1.2670171584161023),
    (0.96310354414547417, -0.98681045945098445, -0.080970342380213681, 0.11399822433804815),
    (-0.4935548713272192, -0.36982445974129097, 0.59138263525214385, 0.28332753020765761),
    (-0.018229405669178075, -0.004894646004333726, -1.1247321106567743, 1.1560331326003399),
    (0.0050057386627905247, 0.15670000185997468, -1.0570514226985581, 0.9082894546645699),
    (1.8043300565308316, -1.7950775974117641, 0.00056613955105136969, -0.0063400643845068971),
    (0.019271366358533829, -0.56524922317385029, 1.1723728914392046, -0.61090578702103282),
    (6.7288431130858689e-09, -2.5092762399493873e-09, 4.5276995137369438, -4.5414038566352302),
    (1.3505819565360249, -0.99953781910568318, 0.23827296296739117, -0.57408342397109358),
    (1.5688752010519158, -1.5833906497288195, 0.0041041559169197961, 0.015740281877251634),
    (-0.68873343327798875, -0.17111784288870496, 0.52335399429594776, 0.3585357577997722),
    (-0.0018004290336272571, 0.0064266411372197003, -1.3119719293946137, 1.3170077923618386),
    (-0.61570173221531777, -0.3184122152582809, 0.31430700919581778, 0.63422364187861602),
    (1.2261958681223977, -1.1759406629902214, -0.079245531641626829, 0.036028242684568376),
    (-0.92389848139567277, 0.029160692264716192, 0.13904979124461447, 0.7684362319485597),
    (0.28793268862697907, -0.35554477064574064, -0.61139623260077613, 0.68339780205194778),
    (1.7131452466399357, -2.2973928799933478, 2.4973510286185308, -1.8390545761970714),
    (-6.1134796758562394e-05, 2.0375264385931869e-05, -2.1548898977891491, 2.1606390782522316),
    (1.3239051614577864, -1.4755116157641202, 0.62393992447288626, -0.45368120058476885),
    (0.85064255157813884, -1.2482800497827924, 0.25187572827264948, 0.15172339461591769),
    (-0.62719361255817352, -0.35042929153071134, 0.25725911577399918, 0.73142622594026319),
    (-0.0026059681689245672, -0.34434614946434167, -0.59854495637398242, 0.95360461022308196),
    (1.0635317502645998, -0.20575855921253486, -0.2309006317782665, -0.61468158674722206),
    (-3.1978742570732677, 3.2065202217448965, -0.00026193655654408777, -0.00033647001300962702), 
    (-1.069560039807683, 0.47818263205838485, 0.37824700005494211, 0.22761049612961423), 
    (4.9237142141417092e-16, -5.5339052919722458e-16, 20.99918314766094, -21.159426593953086), 
    (1.8618052780327461, -1.6863479722771304, 0.93679606507220525, -1.0734723693707557), 
    (1.149405448928531, -1.3144070821928697, 0.060385257990839963, 0.11140213198600024),    
    (0.080906322890829135, -0.84988812230230637, 1.3071347294118731, -0.52304488435360175),     
    (9.9852010696147107e-09, 6.951369172195315e-10, -5.2563625422373583, 5.2494982858314065),   
    (0.95511057171624669, -0.33975853709390519, -0.52941665011784178, -0.072050212596780461),   
    (3.3594758416099655, -3.3593960984710907, 0.00028207263180002388, 0.00023173296596578407),  
    (-1.021531225929277, 0.12164249182378034, 0.39498010394037464, 0.52694916397908587),    
    (0.0029440676571197266, 0.0029843077660660121, -1.5650576045930993, 1.5668469693421867), 
    (2.630087969275491, -2.8365694885048258, 2.2629257454778728, -1.9216317510005549), 
    (0.33333189576514394, -1.0352923172592372, 0.19750506911915924, 0.50542057615930436), 
    (1.0128582766523972, -1.7972371079477132, 1.8082784854021356, -0.98460801378115748), 

    (-6.1095924797532453, 6.3422653425987781, -6.775749152617756, 6.6551998523715614), 
    (-3.6853231875362558, 3.6733552303218171, 0.00029807627213207912, -0.00019162986875661406),
    (-1.6951022420574469, 1.1079522827042667, -0.37348591798473307, 0.97812118292177275),
    (0.00011721769157782777, -0.00066121273741805804, -1.9541934873672564, 1.9607719349583097),
    (0.23582185677877618, 0.22604511159659266, -1.2242000948697123, 0.77692315495072284),
    (3.7249860369650771, -3.7383478154614425, 0.00029572792875879006, -9.6497281551654937e-05),
    (-0.79765730117538602, -0.13269307635751634, 0.77464689713832446, 0.16896444139345304),
    (7.5554665035302188e-07, -1.2102935224884679e-06, -3.6265520182911866, 3.6200287834091345),
    (1.3706508420341295, -0.87849023740593779, -0.25881019638826241, -0.21795551833276916),
    (2.1288130798111982, -2.1328023237340736, 0.012131037015017686, -0.00060646278965364379),
    (-0.52858205005949532, -0.43526442631907813, 1.033214430517569, -0.057642379029075708),
    (3.3343413135820017e-07, -2.0200887135285476e-07, -4.2349297239772028, 4.2184135821964324),
    (1.2005164587037613, -0.57749163958653082, -0.4772298431062707, -0.12713654642883504),
    (2.812072368072652, -2.8103528927076784, 0.0025298306018758281, 0.00069026765353516365),
    (-0.84765038611182697, -0.1798606228182219, 0.77820850436477396, 0.27897743093756927),
    (9.2530961308214614e-05, 8.2367931380405508e-06, -2.578713560831877, 2.5813746363272294),
    (0.10215546730425384, 0.47850470317763666, -1.4508318266029046, 0.88989146662818386),
    (-16.095821765358775, 15.494953688251174, 1.4400927382536636e-07, -5.1243459827158552e-08),
    (-1.6670116524363914, 0.86050995908490924, -0.10587975306438854, 0.95286760875153798),
    (0.0044995990730129646, -0.0014116518727467602, -1.8284774367826153, 1.830372118934565),
    (-0.87120315604048015, 1.2684951335176842, -2.1214389175535917, 1.7545962373018111),
    (-4.7140477557251144, 4.689907361579821, 0.00020884369617781581, -4.3742596328305287e-05),
    (-2.299903757611474, 1.6521766084175755, -0.92680230698790711, 1.5848011369306492),
    (0.0050106630939421937, -0.0043839742512835397, -1.8229150954558557, 1.8302041857038296),
    (-0.49519400691954119, 0.89883675235523453, -1.865733972721437, 1.497790183256889),
    (-9.0811200278442659, 8.9422591726852829, 4.6051613132124521e-06, -3.3552887698802367e-06),
    (-1.6724291590553688, 0.81744851742031466, 0.068405184196516533, 0.80735386968876133),
    (0.00011223054329010187, -0.00030535481005334816, -2.5199479435560113, 2.5221788388248911),
    (0.36966709671441794, 0.22499896163439881, -1.3821565427051796, 0.80427345652504345),
    (4.3930616516209051, -4.408708858525892, 0.00036411355472000658, -5.9884179773234884e-05)
]

def main():
    """
    Testing
    """

    print("============")
    evo = Evolution_1a(lmbda = lmbda_set_1)
    #evo = Evolution_1a(lmbda = default_lmbda)

    print(evo)

    expmt = ExperimentPoincare3(   evo = evo, 
                                    title = "Newton method on minimizing |P(x) - x|^2 seeking orbit", 
                                    descr = "Leveraging Poincare maps to gain insights about our system, nonrigorous computation of Poincare map, newton method on minimizing |P(x) - x|^2 seeking orbit")

    # expmt.setParams(T = 4, start_pt = default_start)
    expmt.setParams(hyperplane = HyperPlane(1, 1, 1, 1, 0.01) )

    print("============")
    print(expmt)

    expmt.run(start_pts = some_crossings  )

if __name__=="__main__":
    main()

